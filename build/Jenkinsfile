node() {
    withCredentials([string(credentialsId: 'docker_server', variable: 'docker_server')]){
        properties([
            parameters([
                string(name: 'docker_repo', defaultValue: 'samagragovernance/avsar', description: 'Docker Image Name'),
                string(name: 'docker_server', defaultValue: "$docker_server", description: 'Docker Registry URL'),

            ])
        ])
    }
    stage('Checkout') {
            cleanWs()
            checkout scm
            env.commit_id = env.BRANCH_NAME
            echo "${env.commit_id}"
    }

    stage('docker-build') {
        sh '''
        docker build -t $docker_server/$docker_repo:$commit_id .
        '''
        if (env.BRANCH_NAME == 'main' || env.BRANCH_NAME == 'dev') {
            sh '''
            docker build -t $docker_server/$docker_repo:latest .
            '''
        }
    }

    stage('docker-push') {
        sh '''
        docker push $docker_server/$docker_repo:$commit_id
        '''
        if (env.BRANCH_NAME == 'main' || env.BRANCH_NAME == 'dev') {
            sh '''
            docker push $docker_server/$docker_repo:latest
            '''
        }
    }
   stage('Start deploy job with latest tag') {
    if (env.BRANCH_NAME == 'main' || env.BRANCH_NAME == 'dev') {
        parallel(
            "prod-deploy": {
                build job: 'ULP/deploy-staging/deploy-avsar/', parameters: [string(name: 'tag', value: 'dev')]
            },
            "dev-deploy": {
                build job: 'SBRC-deploy/deploy-services/deploy-staging/deploy-avsar/', parameters: [string(name: 'tag', value: 'dev')]
            },
            "uat-deploy": {
                build job: 'UAT/deploy-uat/deploy-avsar/', parameters: [string(name: 'tag', value: 'dev')]
            }
        )
    }
}
    
}
